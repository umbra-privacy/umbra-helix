{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-aarch64","name":"NFT","functions":[{"name":"public_get_name","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEceAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIDABABAwEkAwQBAgAoAgIDKgwDBCQCAAAFKg4FBCoNAgMAKAMCAyoOAwIqCAEDAAABAgEqDgIDJAIEAQIkAgQABCQCAAIFKgwEASAAKAo4AQQGIQIAMQAGIAArKg0DAQAoAQIDADgDBAUqDQUCKgwCASMqDQMGHAwAAQcAOAUHCCwMAAgAByQCBAEJDDgBCQohAgA5AAo5AQAAKwQABoADJQAEAAKABCIATCsIgAUACAAoCAIJADgJAQoqDgcKADgBAgYOOAEGByECAEQABzkBAAAqDggDKgwGASAAKCUABHgAgAQNAAAAgASAAyEAAEuAAzkBAAAjKwGAA4AGCwCABgACgAchAABQgAcgAFIrAIADgAUgAGArAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAF6ACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAAVSUBBAABgAUgAGAjKwAYyhjK","debug_symbols":"1ZrdbuIwEIXfxddc2J4/m1dZrarQQhUpChXQlVaId2/S4kCbKFZLW3luEIbj+MMzk+NBOZqH9er58a5uN9u9Wf45mmZ7Xx3qbduNjqeFWe3qpqkf764/NrZ/cfZVv3+q2n64P1S7g1k6jnZh1u1D91as7a6wqZu1WYo/LUbiSHTWRqFB6pgmtBA5iSEKXtQWJtSMwZ3VjFHeqf8ujHM3s3dX8klsyf8qvb9956Mb4F1u652nmNRwrZ6EF4FwVosEN4KHb4Wn9/D9AvjTC9BPL8A3L0AeU8jIczZkaJNaEPwoZPJJnn5O+MKc+Pk53n5hzmT1g3DKW5DoM9UvFoYFfLjsmISpaDCmewUxQyYaBEGSGkL4GA3vVdODanpUTU+q6Vk1vaimD6rpo2Z6sKrpVXstqPZaUO21oNprsfCqRYdJjR9aup6+8MxBsAM98Ij+9zPHD7nAEjL0XUefxPay84DulZ0Us7Ni9sLPCPP1SqXfbXjYepTR/1lU+BkByc/RF35GQIgX+lyNROtTnkVL49+q2heo8BNFhr7w7j1DX3j3nqEvvHvP0BfevWfoS3fmWXou3Znn6Ut35nn64p15ll6117Jqr2XVXsuqvZZVey0r9tpTN/xX7epq1azPj39sntv7q6dBDv+f3r7pxC8=","brillig_names":["public_get_name"],"assert_messages":{"56":"Array index out of bounds","74":"Stack too deep","15":"Not initialized","20":"Function public_get_name can only be called statically","67":"attempt to add with overflow"}},{"name":"transfer_in_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_private_nfts","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"kind":"field"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_private_nfts"]},{"name":"_finish_transfer_to_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7d3dbts4EIbhe/FxDvgzFKXeymKxSNu0CBAkRZMusCh672unluxahGV75LENvidF01IO+fiH89GS+HPx+eHjj6//PD5/eXldfPjr5+Lp5dP92+PL8/Knn7/uFh+/Pz49PX79Z/ufF271h/fv7V+/3T+vfnx9u//+tvjgm87dLR6ePy//mp1bPsKXx6eHxYccfv19t/DhhGPiCcfICcekE45pTjgmn3BMe8Ix3fHHBHfCMSe8DsIJr4Nw7OvgbtS4S2ndtstpaOqbVGgbu6ZvHLssm9YuFlo30vp160a6/EfrVd9F3fflI4W+sUvBtPdJL9/5ofN+it6H1PWt43brYudzju26dc6tH3W+mbXz6c/Or35BPvcvaM/9Czr1LxA3PAnipJl6vSXpWzepibtPWXTq/sz6+o8nfMLFEz7h4gkzXSx/skRJeXgLyda7ovzyiP37rWu7zehzV3pzpmbdNrjNp1B0xbbOSRpeeK7bPNMxlD+1+qdB4tZjS6FpiE76fsQw0biJfZ+bmLebrgATgDrABkAdYAZQB9gCqAPsAFQBigNQB+gB1AEGAHWAEUAdoACoAySJKAFJIkpAkogSkCRyAGDu17Oa7HcBSSI6wEQSUQKSRJSAJBElIElECSgA7gCuVIgXJRUyQ0mFIFBSobovqVCyF1Qa6vCSCsV1SYWKuaRCGVxSEVQKKtS2JRVq25IKtW1Jhdq2pEJtW1DJ1LYlFWrbkgq1bUmF2rakIqgUVKhtSyrUtiUVatuSCrVtSYXatqDSUtuWVKhtSyrUtiUVatuSiqBSUKG2LalQ2xZUumrfQbJR2bp4f61Sa8Xfhr7PoZV4cuMVYa3x4BhCn3Psu5G73TPuulqzxHyEy55hqDastfY8yrBt+077zqX9jVvpH7hNccRda6FyNu7VrZ2GPjdpBM5sbwxObWAMTiUxN7gfHtn73O6Ce8oOY/Ba11IvBl7rMu3FwKnCjcEFcFvwWtetLwZO0jQGJ2kag5M0jcFJmrbggaSpAn83JDzqDcmDekMint5QMJz+6t6FMHQ6jg0JYnpDspXecI64tPw+RIb6KfhJxTx8kZJyt/+hmzxscNFuCjPf5t+9b2+6990t9z66m+79IXXA1o4q5d6Hpt8OZvlkyh+/pNAh5/rHblzY+qwpbu2yHF//Jk/t1u4p661d/EGbL1x0AO1w+l9qk4wH0F79AEK3dwDd1Q9gmK9S26TRAA66+f9VD8Df+gDCrQ/g6j9GpwYgtz6AdOsDaG59ANc/E08M4Ppn4okB3PpMnG59Jk63PhOnW5+J0/XPxD5tBjC102a3TGj9uozP4+L7oFslX+tw3wdw/fP2xACuf96eGMD1z9v7B1DtrVovc9FItfeAPeMp9X5Y/XNxDC6A24LzpZQxON9gGYNzdqAxOGcHGoNzdqDthX/V3lT2YuDU4cbgnHdoDM5JisbgArgtOEnTGJykaQxO0pwdvBmu0nFtGIGTNI3BSZq24NXe4vli4CRNY3CSpjE4SdMYXAA/Yx1eACdp2gafam8CfjFwkqYxOEnTGJykaQvekTSNwUmaxuAkTWNwkqYxuABuC07SNAYnaRqDkzSNwUmaxuAkTVPw4Ag+xuAEH2Nwgo8xuABuC15rWRiHPf1CbHevxAnVblAkfuiHBBmx1DrjT7DUOi9PsNQ6e06w1DrHTbDUugQ3wVLrQtkES611ywRLrYtOEyy1Lg3tZ6l2c5QJFqrcIgtVbpGFKrfIIrCUWKhyiyzVVrlu2OFD/NRS3t6tzkKotiQ+xjBIv+7nQ+NHhtXWzzMaVltsz2cYq63MZzSstow/yjAP3QjdaE6JguG0YfKu70by49dhtSXfjIbUh3pD6kO9IfWh3pD68ADDZthDwTeN2zUU6kO9IfWh3rDaNeEZDatdQJ7RUDBUG5JT9IbkFL0hOUVvSE7RG5JT1IaJnKI3JKfoDckpekNyit5QMFQbklP0huSUQwzb4dK57MLIkJyiNySn6A3JKWrDarfjndOQnKI3JKfoDckpekNqmwMMJQyGIn5/433bk4dq96E8G/fEbS+q3YfyYuBMbMbgzIJzg++//KbafSgvBs46oDE4i4bG4FThxuAsRxqDs3ZpC17tPpQXAydpGoOTNI3BSZrG4AK4BvzdkPCoNyQP6g2JeHpDUpvekCCmNqx258XjDDcakkcnJla7meKchiQgvSGhRm8oGKoNySl6Q3KK3pCcojckp+gNySlaw+jIKXpDcorekJyiNySnaG9IF51gqDYkp+gNySl6Q2rsXcN3FsrmEku923zuZ6G4LbIILHYXxcV6N4Q83yVDXoY+xzE4c6cxOLOyLXi9Gx5eCpxKwhicNTVjcBbgTC9sjvVuLHkpcOpwY3DWAY3BObnBGJykaQxO0rQFZwNPa3CS5uzgzXAVomvDCJykaQxO0jQGF8BtwUmaxuAkTWNwkqYxOEnznHV4AZykaRt82ArYGpykaQxO0jQGJ2kagwvgtuAkTWNwkqYxOEnTGJykaQxO0rQFZzNna3CSpjE4SdMYnKRpDE7wMQYn+BiDE3yMwQk+huC/lj/9e//98f7j08Pr8pjVf/54/vT2+PK8/vHtv2+//2fZ+H8=","brillig_names":["_finish_transfer_to_public"],"assert_messages":{"326":"Array index out of bounds","157":"attempt to add with overflow","259":"attempt to add with overflow","311":"attempt to add with overflow","180":"Array index out of bounds","334":"Array index out of bounds","130":"Storage slot 0 not allowed. Storage slots must start from 1.","28":"Not initialized","188":"Array index out of bounds","342":"Array index out of bounds","33":"Function _finish_transfer_to_public can only be called internally","222":"Array index out of bounds","149":"Array index out of bounds","242":"Array index out of bounds","364":"Stack too deep","172":"Array index out of bounds","358":"attempt to add with overflow","204":"attempt to add with overflow"}},{"name":"private_get_symbol","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"311":"attempt to add with overflow","811":"attempt to subtract with overflow","293":"Array index out of bounds","1244":"Array index out of bounds","1177":"Array index out of bounds","854":"attempt to add with overflow","1433":"Array index out of bounds","1360":"attempt to add with overflow","525":"Initializer address is not the contract deployer","1549":"attempt to add with overflow","519":"Initialization hash does not match","1092":"attempt to add with overflow","1555":"Stack too deep","763":"attempt to add with overflow","891":"attempt to add with overflow","1336":"Array index out of bounds","1525":"Array index out of bounds","1391":"Array index out of bounds","300":"Array index out of bounds","1123":"Array index out of bounds","800":"attempt to add with overflow","922":"attempt to add with overflow","898":"attempt to subtract with overflow","831":"attempt to add with overflow","1154":"Array index out of bounds","953":"Array index out of bounds","1209":"attempt to add with overflow","880":"Array index out of bounds","807":"attempt to subtract with overflow","1313":"attempt to add with overflow","289":"attempt to add with overflow","862":"Array index out of bounds","1185":"Array index out of bounds","789":"Array index out of bounds","1502":"attempt to add with overflow","771":"Array index out of bounds","1344":"Array index out of bounds","1533":"Array index out of bounds","1003":"Array index out of bounds","680":"SharedImmutable already initialized","930":"Array index out of bounds","1375":"Array index out of bounds","729":"SharedImmutable already initialized","985":"attempt to add with overflow","1107":"Array index out of bounds","1040":"attempt to add with overflow","1162":"attempt to add with overflow","961":"Array index out of bounds","181":"attempt to add with overflow","1193":"Array index out of bounds","870":"attempt to add with overflow","529":"invalid admin","846":"Array index out of bounds","779":"attempt to add with overflow","907":"Array index out of bounds","1224":"Array index out of bounds","1413":"Array index out of bounds","1023":"Array index out of bounds","1407":"attempt to add with overflow","755":"Array index out of bounds","1328":"Array index out of bounds","627":"Storage slot 0 not allowed. Storage slots must start from 1.","816":"Array index out of bounds","938":"attempt to add with overflow","1139":"attempt to add with overflow","1261":"attempt to add with overflow","1383":"Array index out of bounds","1115":"Array index out of bounds","1450":"attempt to add with overflow","1517":"Array index out of bounds","969":"Array index out of bounds","902":"attempt to subtract with overflow"}},{"name":"_finalize_transfer_to_private_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMrCIBDAAErCIBEAAIrCIBFAAMiAAs4AIBGAAAiAtMqCAEFAAABAgEkAgEABioOBgUqCAEFAAABAgEkAgAAByoOBwUqCAEFAAABAgEkAgACCCoOCAUeAgAABR4CAAAIMDgABQAIAAkkAgEBBSECAB4ACTkBAAAeAgEACB4CAAAJCjgICQohAgAjAAo5AQAAKggBCCQCBAQJABABCQEkAwQBCAAoCAIJKgwJCioOBwoAKAoCCioOBwoAKAoCCioOBwoqDQgJACgJAgkqDgkIKg0ICQAoCQIJKg4JCCoNCAkAKAkCCSoOCQgqDQgJACgJAgkqDgkIKggBCQAAAQIBKg4ICSoIAQokAgQFCwAQAQsBJAMEAQoAKAoCCyoMCwwqDgcMACgMAgwqDgcMACgMAgwqDgcMACgMAgwoAgAAAAAAAAAAAgAAAAAAAAAAAA0qDg0MKg0KCwAoCwILKg4LCioIAQsAAAECASoOCgsqCAEKAAABAgEkAgQADCoODAoqCAENAAABAgEqDgYNJAIEAQ4kAgQCDyQCAAcQJAIEAxEkAgQEEioMDAQgAF8MOAQPEyECAjkAEyAAYioNDRAKOBAGEyECAGYAEzkBAAAqDAwEIABoDDgEERAhAgIKABAgAGsqDQkQKg0KEyoNCxQqCAEVJAIEBRYAEAEWASQDBAEVACgUAhYkAgQEFwAoFQIYPA8AFgAYKg0QEgIoEgISKg4SECoOEAkqDhULKg4TCioOBQ0AKBUCCQA4CQwKKg0KBQo4BQcJCjgJBgohAgCEAAo5AQAAKggBCSQCBAIKABABCgEkAwQBCQAoCQIKKgwKCyoOBwsqDQkKACgKAgoqDgoJKggBCgAAAQIBKg4JCioMDAQgAJMKOAQMCyECAfQACyAAlioNCgsAKAsCDQA4DQwQKg0QCgo4CgELIQIAnQALOQEAACoNCAEAKAECASoOAQgqCAEBAAABAgEqDggBKgwMBCAApQw4BBEKIQIB3gAKIACoKg0BCgAoCgILADgLDA0qDQ0BACgKAg0AOA0OECoNEAsAKAoCEAA4EA8SKg0SDRwMAQ0QHAwAEAocDAEKDRYMDQoKOAEHEAQ4ChASCjgLBwoEOBIKEAo4EAYKIQIAvQAKOQEAACoMDAQgAL8KOAQMCiECAc4ACiAAwhwMBQISHAwAEhACOAIQEigCAAAAAAAAAAABAAAAAAAAAAAAEwg4EhMUHAwFFBUcDAAVEgI4FBIVCDgVExQEOBITFQA4FRASKQIAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAEAQ4EBQTADgSExAKOAIQEyECANMAEzkBAAApAgARMVagaPYDAjJAyWtNpUdGZ9s7hxHFIcdIISoVvANOpgAQKggBEyQCBAMVABABFQEkAwQBEwAoEwIVKgwVFioOEhYAKBYCFioOFBYpAgAwQm5kruMOmYwTyM7s2jp3gH2+rVK8Lzvw6uhRtLcQwQAVKggBFiQCBAQXABABFwEkAwQBFgAoFgIXKgwXGCoOFRgAKBgCGCoOEBgAKBgCGCoOBhgqCAEXJAIEBBgAEAEYASQDBAEXACgWAhgkAgQDGQAoEwIaJAIEAhsAKBcCHED3ABgAGgAcABkAKBcCEgA4EgwTKg0TEAAoFwITADgTDhQqDRQSACgXAhQAOBQPFSoNFRMcDAETFBwMABQPHAwBDxMKOBABDwo4EgsUBDgPFBUWDBQWBDgPFhQcDAAPFgA4EBYXKggBFiQCBAQYABABGAEkAwQBFgAoFgIYPz/AABcAEgAPAAEACwANABgAKBYCGAA4GAwZKg0ZFwAoFgIZADgZDhoqDRoYKggBFgAAAQIBKggBGQAAAQIBKggBGgAAAQIBKg4XFioOGBkqDg8aKggBGyQCBAQcABABHAEkAwQBGwAoGwIcPz/AABAAEgATABAAEgATABwAKBsCHQA4HQweKg0eHAAoGwIeADgeDh8qDR8dIQIBLQAVIAEpKgwXBCoMGAUqDA8KIAExKgwcBCoMHQUqDAYKIAExKg4EFioOBRkqDgoaIQIBNgATIAE6Kg4BFioOCxkqDg0aIAE6IQIBPAANIAFAKg4QFioOEhkqDhMaIAFAFgwTBBYMDQUEOAQFBgQ4FAYEKg0WBSoNGQYEOBMNChI4BAoLKg4FFioOBhkqDgsaLwIABSoNCQQAKAQCBCoOBAkqCAEEAAABAgEqDgkEKg0JBQAoBQIFKg4FCSoIAQUAAAECASoOCQUqDAwBIAFaCjgBDAYqCAEJJAIEAgoAEAEKASQDBAEJACgJAgoqDAoLKg4CCyECAZIABiABZCoNBAUqDQkEAigEAgQqDgQJJAIEAQYGKAYCAiQCBAIKADgGCgkqCAEEABABCQEkAwQBBAAoBAIJKg4GCSQCBAIKADgECgkAKAUCCisEAAqAAysEAAmABCsEAAaABSIC2AAoBAIJKg0JBgAoCQIFNA0ABQAGKgwMASABfgw4ARECIQIBggACIAGBIxwMAAECADgDAgQkAgQDBQw4AQUGIQIBiAAGOQEAAAAoCAIFADgFAQYqDQYCLQwAAgAEADgBDgIOOAECBCECAZAABDkBAAAqDAIBIAF+JAIEAQsMOAELDSECAZYADTkBAAAAKAkCCwA4CwENKg0NCioIAQkkAgQCCwAQAQsBJAMEAQkAKAkCCyoMCw0qDgoNKg0JCwAoCwILKg4LCSoOCQUqDAwGIAGmCjgGDAkhAgGvAAkgAakAOAEOBg44AQYJIQIBrQAJOQEAACoMBgEgAVoqDQQJADgBBgoOOAEKCyECAbQACzkBAAAqDQULJAIEAQ8MOAYPECECAbkAEDkBAAAAKAsCDwA4DwYQKg0QDSQCBAEPDDgKDxAhAgHAABA5AQAAKwQACYADJQAEAAKABCIC4ysIgAUACwAoCwIPADgPChAqDg0QKg4LBAA4Bg4JDjgGCQohAgHMAAo5AQAAKgwJBiABphwMAAQKADgFChAkAgQBEgw4BBITIQIB1AATOQEAAAAoCQISADgSBBMqDRMKLQwACgAQADgEDgoOOAQKECECAdwAEDkBAAAqDAoEIAC/Kg0BChwMAAQLADgDCw0sDAANAAskAgQDEAw4BBASIQIB5gASOQEAACsEAAqAAyUABAAEgAQiAuMrCIAFAA0AKA0CEAA4EAQSKg4LEgA4BA4KDjgECgshAgHxAAs5AQAAKg4NASoMCgQgAKUqDQoLHAwABA0AOAUNECwMABAADSQCBAESDDgEEhMhAgH8ABM5AQAAKwQAC4ADJQAEAAKABCIC4ysIgAUAEAAoEAISADgSBBMqDg0TADgEDgsOOAQLDSECAgcADTkBAAAqDhAKKgwLBCAAkyoNChAMOAQQEyECAg4AEyACMyoNCRAqDQsTKg0KFCoNDRUqDQsWJAIEBBgMOAQYGSECAhcAGTkBAAAAKBYCGAA4GAQZKg0ZFyoNCRYkAgQDGQw4BBkaIQICHwAaOQEAAAAoFgIZADgZBBoqDRoYADgXGBYkAgQEGAw4BBgZIQICJwAZOQEAACsEABOAAyUABAAFgAQiAuMrCIAFABcAKBcCGAA4GAQZKg4WGSoOEAkqDhcLKg4UCioOFQ0gAjMAOAQOEA44BBATIQICNwATOQEAACoMEAQgAGgMOAQPEyECAjwAEyACnioIARMkAgQDFAAQARQBJAMEARMAKBMCFCoMFBUqDhAVACgVAhUqDgIVJAIEAhUMOAQVFiECAkkAFjkBAAAAKBMCFQA4FQQWKg0WFCoNDRMKOBMGFSECAlAAFTkBAAAqDQoTCjgTERUhAgJzABUgAlQqDQkTKg0LFSoNChYqDQ0XKg0KGCQCBAMaDDgYGhshAgJdABs5AQAAKwQAE4ADJQAEAASABCIC4ysIgAUAGQAoGQIaADgaGBsqDhQbKg0ZEwAoEwITKg4TGSoNFRMAKBMCEyoOExUAOBYOEw44FhMUIQICbgAUOQEAACoOGQkqDhULKg4TCioOFw0gAp4qDAwTIAJ1DDgTERUhAgKkABUgAngqDQkTKg0NFSoNCxYqCAEXJAIEBRgAEAEYASQDBAEXACgWAhgkAgQEGQAoFwIaPA8AGAAaKg0TFgIoFgIWKg4WEyoNExYAKBYCFioOFhMqDRcWACgWAhYqDhYXKwQAE4ADJQAEAASABCIC4ysIgAUAFgAoFgIYADgYDBkqDhQZKg0WEwAoEwITKg4TFioNFxMAKBMCEyoOExcqDhYJKg4XCyoODgoqDhUNIAKeADgEDhMOOAQTFCECAqIAFDkBAAAqDBMEIABfKg0KFQw4ExUWIQICqAAWIALNKg0JFSoNCxYqDQoXKg0NGCoNCxkkAgQEGww4ExscIQICsQAcOQEAAAAoGQIbADgbExwqDRwaKg0JGSQCBAMcDDgTHB0hAgK5AB05AQAAACgZAhwAOBwTHSoNHRsAOBobGSQCBAQbDDgTGxwhAgLBABw5AQAAKwQAFoADJQAEAAWABCIC4ysIgAUAGgAoGgIbADgbExwqDhkcKg4VCSoOGgsqDhcKKg4YDSACzQA4Ew4VDjgTFRYhAgLRABY5AQAAKgwVEyACdSUABHgAgAQNAAAAgASAAyEAAteAAzkBAAAjJQAEAACABw0AgAeABYAIFwCACIAIIQAC4oAIAQCAA4AHgAkrAYAJgAYBAIAEgAeACSsCgAaACQEAgAcAAoAHIALZIysBgAOABgsAgAYAAoAHIQAC54AHIALpKwCAA4AFIAL3KwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAAL1gAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAuwlAQQAAYAFIAL3IysAGMoYyg==","debug_symbols":"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","brillig_names":["_finalize_transfer_to_private_unsafe"],"assert_messages":{"704":"Array index out of bounds","485":"Array index out of bounds","34":"Function _finalize_transfer_to_private_unsafe can only be called internally","156":"invalid NFT owner","604":"Array index out of bounds","534":"Array index out of bounds","467":"Array index out of bounds","720":"attempt to add with overflow","726":"Stack too deep","391":"Array index out of bounds","507":"Array index out of bounds","440":"Array index out of bounds","696":"Array index out of bounds","428":"attempt to add with overflow","550":"Array index out of bounds","29":"Not initialized","459":"attempt to add with overflow","584":"Array index out of bounds","447":"Array index out of bounds","188":"transfer not prepared","566":"attempt to add with overflow","435":"attempt to add with overflow","688":"Array index out of bounds","496":"attempt to add with overflow","621":"attempt to add with overflow","673":"attempt to add with overflow","542":"Array index out of bounds","475":"attempt to add with overflow","405":"Array index out of bounds","399":"attempt to add with overflow","518":"attempt to add with overflow","131":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"public_get_symbol","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEYeAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIEABABBAEkAwQBAgAoAgIEKgwEBSQCAAAGKg4GBSoNAgQAKAQCBCoOBAIqCAEEAAABAgEqDgIEJAIEAAIkAgQBBSoMAgEgACcKOAECBiECADAABiAAKioNBAEAKAECBAA4BAIFKg0FAyoMAwEjKg0EBhwMAAEHADgDBwgsDAAIAAckAgQBCQw4AQkKIQIAOAAKOQEAACsEAAaAAyUABAACgAQiAEsrCIAFAAgAKAgCCQA4CQEKKg4HCgA4AQUGDjgBBgchAgBDAAc5AQAAKg4IBCoMBgEgACclAAR4AIAEDQAAAIAEgAMhAABKgAM5AQAAIysBgAOABgsAgAYAAoAHIQAAT4AHIABRKwCAA4AFIABfKwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAABdgAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAFQlAQQAAYAFIABfIysAGMoYyg==","debug_symbols":"1ZrfTsIwFMbfpddctD3/Wl7FGDMUzJJlGEATQ3h3h9KBblmjqOm5IRS+rr+d0/Y7a7Y3D8vF8+Nd3a7WWzO/2ZtmfV/t6nXbtfaHmVls6qapH+8ufzb2+OHsu377VLXH5nZXbXZm7jjamVm2D91Xsba7wqpulmYu/jAbiCPRSRuFeqljGtFC5CSGKHhWWxhRMwZ3UjNG+aS+nRnnrmbvruST2JL/V3p/feSj6+FdLvTOU0xquFSPwotAOKlFghvAw6/C02f44wD41wPQXw/AVw9AHlPKyHM2ZWiTWhD8IGXyTZ5jn/CDPvH7fbz9QZ/R1Y/Wp6SgRcmsfrHQD+DDOWISxrLBmPYKYoZMNgiCJDWE8DUb3qumB9X0qJqeVNOzanpRTR9U00fN9GBV06v2WlDttaDaa0G110Lhew46TGr88kjX0WPh8x7B9vTAA/r/n/e+nwssIUPfPdEnsT1HHtC9s6NidlLMXniFk1mvpe823IceZXCeRYVXOEh+ir7wCgchnulzayRan+ZZtDS8V9W+QIXXQxn6wuuhDH3hZw8Z+sLPHjL0hZ89ZOhLd+Zp+tKdeZKeS3fmafrinXmSXrXXsmqvZdVey6q9llV7LSv22kPXfKk2dbVolqfXP1bP7f3F2yC716ePfzrxGw==","brillig_names":["public_get_symbol"],"assert_messages":{"66":"attempt to add with overflow","55":"Array index out of bounds","20":"Function public_get_symbol can only be called statically","15":"Not initialized","73":"Stack too deep"}},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["mint"],"assert_messages":{"512":"Array index out of bounds","1018":"Array index out of bounds","951":"attempt to add with overflow","628":"attempt to add with overflow","427":"attempt to add with overflow","604":"Array index out of bounds","659":"Array index out of bounds","720":"Array index out of bounds","458":"Array index out of bounds","1226":"attempt to add with overflow","836":"attempt to add with overflow","812":"Array index out of bounds","233":"Storage slot 0 not allowed. Storage slots must start from 1.","873":"Array index out of bounds","934":"Array index out of bounds","32":"zero token ID not supported","1257":"Array index out of bounds","1050":"attempt to add with overflow","581":"attempt to add with overflow","130":"Storage slot 0 not allowed. Storage slots must start from 1.","1026":"Array index out of bounds","636":"Array index out of bounds","1087":"Array index out of bounds","691":"attempt to add with overflow","612":"Array index out of bounds","667":"Array index out of bounds","789":"attempt to add with overflow","905":"attempt to add with overflow","320":"Storage slot 0 not allowed. Storage slots must start from 1.","442":"Array index out of bounds","820":"Array index out of bounds","881":"Array index out of bounds","1137":"Array index out of bounds","1003":"attempt to add with overflow","1119":"attempt to add with overflow","28":"Not initialized","857":"attempt to add with overflow","1174":"attempt to add with overflow","1241":"Array index out of bounds","400":"Storage slot 0 not allowed. Storage slots must start from 1.","1034":"Array index out of bounds","1095":"Array index out of bounds","644":"attempt to add with overflow","254":"token already exists","1071":"attempt to add with overflow","492":"Array index out of bounds","675":"Array index out of bounds","419":"Array index out of bounds","157":"caller is not a minter","474":"attempt to add with overflow","596":"Array index out of bounds","529":"attempt to add with overflow","846":"Array index out of bounds","1157":"Array index out of bounds","450":"Array index out of bounds","1279":"Stack too deep","700":"Array index out of bounds","889":"Array index out of bounds","1273":"attempt to add with overflow","804":"Array index out of bounds","737":"attempt to add with overflow","1060":"Array index out of bounds","1249":"Array index out of bounds","914":"Array index out of bounds","1103":"Array index out of bounds"}},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZbbaoNAEIbfZa+9mJk9+yqlBE00CKJBTaFI3r3bxlXbrs2FtDREr2Z2P+bw7wzYs0OWno+7osrrlsVPPSvrfdIVdeW8niH/OGtPSfXutl3SdCxGZSFiWXVwpga4RCwvyozFmi7RN5i00QNMBuwIo1IBmgtlBppLgTdoRLAeR/fRyHOSId4Y5XELcqJFMDjZMbY2c/g5Yig2ZRaUkZsyC8qoTZkFZfRqZbgV6Hu1Wk+9wjWD+fUMdnUGJCk8TGb+uiH9rRxDWwWf6wlMDhpJfnTc0+HX+gnuvH4M1o/S4jh4StCN/QJAP9QEKPiEB1cAlPT76GyNf7cyRI/VLn+sdkW4XTXugLO1+LldacDT0qBdvWDyv9XkvLQpyrI47ua/re74JWmKJC2zwc3P1X52272erjcuxBs=","brillig_names":[]},{"name":"finalize_transfer_to_private","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAs4qCAEEAAABAgEkAgEABSoOBQQqCAEEAAABAgEkAgAABioOBgQqCAEEAAABAgEkAgACByoOBwQeAgAABB4CAAAHMDgABAAHAAgkAgEBBCECAB0ACDkBAAAeAgEAByoIAQgkAgQECQAQAQkBJAMEAQgAKAgCCSoMCQoqDgYKACgKAgoqDgYKACgKAgoqDgYKKg0ICQAoCQIJKg4JCCoNCAkAKAkCCSoOCQgqDQgJACgJAgkqDgkIKg0ICQAoCQIJKg4JCCoIAQkAAAECASoOCAkqCAEKJAIEBQsAEAELASQDBAEKACgKAgsqDAsMKg4GDAAoDAIMKg4GDAAoDAIMKg4GDAAoDAIMKAIAAAAAAAAAAAIAAAAAAAAAAAANKg4NDCoNCgsAKAsCCyoOCwoqCAELAAABAgEqDgoLKggBCgAAAQIBJAIEAAwqDgwKKggBDQAAAQIBKg4FDSQCBAMOJAIEBA8kAgQBECQCBAIRJAIABxIqDAwDIABaDDgDERMhAgI0ABMgAF0qDQ0SCjgSBRMhAgBhABM5AQAAKgwMAyAAYww4Aw4SIQICBQASIABmKg0JEioNChMqDQsUKggBFSQCBAUWABABFgEkAwQBFQAoFAIWJAIEBBcAKBUCGDwPABYAGCoNEg8CKA8CDyoODxIqDhIJKg4VCyoOEwoqDgQNACgVAgkAOAkMCioNCgQKOAQGCQo4CQUKIQIAfwAKOQEAACoIAQkkAgQCCgAQAQoBJAMEAQkAKAkCCioMCgsqDgYLKg0JCgAoCgIKKg4KCSoIAQoAAAECASoOCQoqDAwDIACOCjgDDAshAgHvAAsgAJEqDQoLACgLAg0AOA0MDyoNDwoKOAoHCyECAJgACzkBAAAqDQgHACgHAgcqDgcIKggBBwAAAQIBKg4IByoMDAMgAKAMOAMOCiECAdkACiAAoyoNBwoAKAoCCwA4CwwNKg0NBwAoCgINADgNEA8qDQ8LACgKAg8AOA8REioNEg0cDAENDxwMAA8KHAwBCg0WDA0KCjgHBg8EOAoPEgo4CwYKBDgSCg8KOA8FCiECALgACjkBAAAqDAwDIAC6CjgDDAohAgHJAAogAL0cDAUBEhwMABIPAjgBDxIoAgAAAAAAAAAAAQAAAAAAAAAAABMIOBITFBwMBRQVHAwAFRICOBQSFQg4FRMUBDgSExUAOBUPEikCAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAA8EOA8UEwA4EhMPCjgBDxMhAgDOABM5AQAAKggBDyQCBAQTABABEwEkAwQBDwAoDwITKgwTFSkCADBCbmSu4w6ZjBPIzuzaOneAfb6tUrwvO/Dq6FG0txDBABYqDhYVACgVAhUpAgARMVagaPYDAjJAyWtNpUdGZ9s7hxHFIcdIISoVvANOpgAXKg4XFQAoFQIVKg4FFSoIARMkAgQDFQAQARUBJAMEARMAKBMCFSoMFRgqDhIYACgYAhgqDhQYKggBFSQCBAQYABABGAEkAwQBFQAoDwIYJAIEAxkAKBMCGiQCBAIbACgVAhxA9wAYABoAHAAZACgVAhIAOBIMEyoNEw8AKBUCEwA4ExAUKg0UEgAoFQIUADgUERYqDRYTHAwBExQcDAAUERwMARETCjgPBxEKOBILFAQ4ERQVFgwUFgQ4ERYUHAwAERYAOA8WFyoIARYkAgQEGAAQARgBJAMEARYAKBYCGD8/wAAXABIAEQAHAAsADQAYACgWAhgAOBgMGSoNGRcAKBYCGQA4GRAaKg0aGCoIARYAAAECASoIARkAAAECASoIARoAAAECASoOFxYqDhgZKg4RGioIARskAgQEHAAQARwBJAMEARsAKBsCHD8/wAAPABIAEwAPABIAEwAcACgbAh0AOB0MHioNHhwAKBsCHgA4HhAfKg0fHSECASgAFSABJCoMFwMqDBgEKgwRCiABLCoMHAMqDB0EKgwFCiABLCoOAxYqDgQZKg4KGiECATEAEyABNSoOBxYqDgsZKg4NGiABNSECATcADSABOyoODxYqDhIZKg4TGiABOxYMEwQWDA0FBDgEBQcEOBQHBCoNFgUqDRkHBDgTDQoSOAQKCyoOBRYqDgcZKg4LGi8CAAUqDQkEACgEAgQqDgQJKggBBAAAAQIBKg4JBCoNCQUAKAUCBSoOBQkqCAEFAAABAgEqDgkFKgwMAyABVQo4AwwHKggBCSQCBAIKABABCgEkAwQBCQAoCQIKKgwKCyoOAQshAgGNAAcgAV8qDQQFKg0JBAIoBAIEKg4ECSQCBAEHBigHAgEkAgQCCgA4BwoJKggBBAAQAQkBJAMEAQQAKAQCCSoOBwkkAgQCCgA4BAoJACgFAgorBAAKgAMrBAAJgAQrBAAHgAUiAtMAKAQCCSoNCQcAKAkCBTQNAAUAByoMDAMgAXkMOAMOASECAX0AASABfCMcDAADAQA4AgEEJAIEAwUMOAMFByECAYMABzkBAAAAKAgCBQA4BQMHKg0HAS0MAAEABAA4AxABDjgDAQQhAgGLAAQ5AQAAKgwBAyABeSQCBAELDDgDCw0hAgGRAA05AQAAACgJAgsAOAsDDSoNDQoqCAEJJAIEAgsAEAELASQDBAEJACgJAgsqDAsNKg4KDSoNCQsAKAsCCyoOCwkqDgkFKgwMByABoQo4BwwJIQIBqgAJIAGkADgDEAcOOAMHCSECAagACTkBAAAqDAcDIAFVKg0ECQA4AwcKDjgDCgshAgGvAAs5AQAAKg0FCyQCBAEPDDgHDxEhAgG0ABE5AQAAACgLAg8AOA8HESoNEQ0kAgQBDww4Cg8RIQIBuwAROQEAACsEAAmAAyUABAACgAQiAt4rCIAFAAsAKAsCDwA4DwoRKg4NESoOCwQAOAcQCQ44BwkKIQIBxwAKOQEAACoMCQcgAaEcDAADCgA4BAoPJAIEARIMOAMSEyECAc8AEzkBAAAAKAkCEgA4EgMTKg0TCi0MAAoADwA4AxAKDjgDCg8hAgHXAA85AQAAKgwKAyAAuioNBwocDAADCwA4AgsNLAwADQALJAIEAw8MOAMPEiECAeEAEjkBAAArBAAKgAMlAAQABIAEIgLeKwiABQANACgNAg8AOA8DEioOCxIAOAMQCg44AwoLIQIB7AALOQEAACoODQcqDAoDIACgKg0KCxwMAAMNADgEDQ8sDAAPAA0kAgQBEgw4AxITIQIB9wATOQEAACsEAAuAAyUABAACgAQiAt4rCIAFAA8AKA8CEgA4EgMTKg4NEwA4AxALDjgDCw0hAgICAA05AQAAKg4PCioMCwMgAI4qDQoSDDgDEhMhAgIJABMgAi4qDQkSKg0LEyoNChQqDQ0VKg0LFiQCBAQYDDgDGBkhAgISABk5AQAAACgWAhgAOBgDGSoNGRcqDQkWJAIEAxkMOAMZGiECAhoAGjkBAAAAKBYCGQA4GQMaKg0aGAA4FxgWJAIEBBgMOAMYGSECAiIAGTkBAAArBAATgAMlAAQABYAEIgLeKwiABQAXACgXAhgAOBgDGSoOFhkqDhIJKg4XCyoOFAoqDhUNIAIuADgDEBIOOAMSEyECAjIAEzkBAAAqDBIDIABjDDgDERMhAgI3ABMgApkqCAETJAIEAxQAEAEUASQDBAETACgTAhQqDBQVKg4SFQAoFQIVKg4BFSQCBAIVDDgDFRYhAgJEABY5AQAAACgTAhUAOBUDFioNFhQqDQ0TCjgTBRUhAgJLABU5AQAAKg0KEwo4Ew4VIQICbgAVIAJPKg0JEyoNCxUqDQoWKg0NFyoNChgkAgQDGgw4GBobIQICWAAbOQEAACsEABOAAyUABAAEgAQiAt4rCIAFABkAKBkCGgA4GhgbKg4UGyoNGRMAKBMCEyoOExkqDRUTACgTAhMqDhMVADgWEBMOOBYTFCECAmkAFDkBAAAqDhkJKg4VCyoOEwoqDhcNIAKZKgwMEyACcAw4Ew4VIQICnwAVIAJzKg0JEyoNDRUqDQsWKggBFyQCBAUYABABGAEkAwQBFwAoFgIYJAIEBBkAKBcCGjwPABgAGioNExYCKBYCFioOFhMqDRMWACgWAhYqDhYTKg0XFgAoFgIWKg4WFysEABOAAyUABAAEgAQiAt4rCIAFABYAKBYCGAA4GAwZKg4UGSoNFhMAKBMCEyoOExYqDRcTACgTAhMqDhMXKg4WCSoOFwsqDhAKKg4VDSACmQA4AxATDjgDExQhAgKdABQ5AQAAKgwTAyAAWioNChUMOBMVFiECAqMAFiACyCoNCRUqDQsWKg0KFyoNDRgqDQsZJAIEBBsMOBMbHCECAqwAHDkBAAAAKBkCGwA4GxMcKg0cGioNCRkkAgQDHAw4ExwdIQICtAAdOQEAAAAoGQIcADgcEx0qDR0bADgaGxkkAgQEGww4ExscIQICvAAcOQEAACsEABaAAyUABAAFgAQiAt4rCIAFABoAKBoCGwA4GxMcKg4ZHCoOFQkqDhoLKg4XCioOGA0gAsgAOBMQFQ44ExUWIQICzAAWOQEAACoMFRMgAnAlAAR4AIAEDQAAAIAEgAMhAALSgAM5AQAAIyUABAAAgAcNAIAHgAWACBcAgAiACCEAAt2ACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAC1CMrAYADgAYLAIAGAAKAByEAAuKAByAC5CsAgAOABSAC8isAAAGABQEAAAGABAABJQAEAACACQ0AgAmABIAKFwCACoAKIQAC8IAKAQCAA4AJgAsrAYALgAgBAIAFgAmACysCgAiACwEAgAkAAoAJIALnJQEEAAGABSAC8iMrABjKGMo=","debug_symbols":"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","brillig_names":["finalize_transfer_to_private"],"assert_messages":{"442":"Array index out of bounds","183":"transfer not prepared","561":"attempt to add with overflow","430":"attempt to add with overflow","683":"Array index out of bounds","491":"attempt to add with overflow","616":"attempt to add with overflow","28":"Not initialized","537":"Array index out of bounds","470":"attempt to add with overflow","668":"attempt to add with overflow","400":"Array index out of bounds","394":"attempt to add with overflow","513":"attempt to add with overflow","126":"Storage slot 0 not allowed. Storage slots must start from 1.","699":"Array index out of bounds","480":"Array index out of bounds","151":"invalid NFT owner","599":"Array index out of bounds","529":"Array index out of bounds","462":"Array index out of bounds","715":"attempt to add with overflow","721":"Stack too deep","386":"Array index out of bounds","502":"Array index out of bounds","435":"Array index out of bounds","691":"Array index out of bounds","423":"attempt to add with overflow","545":"Array index out of bounds","454":"attempt to add with overflow","579":"Array index out of bounds"}},{"name":"set_minter","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_minter"],"assert_messages":{"29":"Not initialized","58":"caller is not an admin","410":"Stack too deep","212":"Array index out of bounds","366":"Array index out of bounds","392":"Array index out of bounds","153":"Storage slot 0 not allowed. Storage slots must start from 1.","246":"Array index out of bounds","403":"attempt to add with overflow","173":"Array index out of bounds","266":"Array index out of bounds","196":"Array index out of bounds","228":"attempt to add with overflow","350":"Array index out of bounds","283":"attempt to add with overflow","382":"attempt to add with overflow","181":"attempt to add with overflow","335":"attempt to add with overflow","204":"Array index out of bounds","358":"Array index out of bounds"}},{"name":"owner_of","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7d3Rbts4Fsbxd8l1L0TyiKT6KovFoJ3pDAIU6aDtLLAo+u7rpJHiRqxl+8hH4vJ/M0imtEP+4ojnoy3y290fH97/89dv9w9/fvpy9/Zf3+4+fvr93df7Tw+H7759f3P3/vP9x4/3f/12/L/vusf/OPfU/svf7x4ev/3y9d3nr3dvXRy6N3cfHv44fJm67vAMf95//HD3Nvnv/35z5/wVjwlXPEaueEx/xWPiFY9JVzwmX/GY4fLH+O6Kx1zxOvBXvA78pa+DN7PGQ98/tx1SPzV1sS+0DUMcG4chyUvrLhRaR8nuuXWUIf3U+rHvou774Zn82LjrvWnve7384KbOuyV65/thbB2OWxc7n1LIz61Tym7W+bhq5/ufO//4A9Ktf0C+9Q8Y1D+g9zL+ynofF39l0o2tkwT/+lcWrrgKhSuuQuGKq1C4YjYK5b/+kNz0Fx1SCAu/wjCSDXl4EUtD6Q+oj89tffeiG7pi266TfnpxdMNLN4IvX1nGl9Lxby5IoakPnYz9CH6hcQxjn2NIx00fAXsAdYARQB1gAlAHmAHUAQ4AqgClA1AH6ADUAXoAdYABQB2gAKgDJIkoAUkiSkCSiBKQJHIGYBrXs2JyrwFJIjrAniSiBCSJKAFJIkpAkogSUAB8BfioQrwoqZAZSioEgZIK1X1JhZK9oBKpw0sqFNclFSrmkgplcElFUCmoUNuWVKhtSyrUtiUVatuSCrVtQSVR25ZUqG1LKtS2JRVq25KKoFJQobYtqVDbllSobUsq1LYlFWrbgkqmti2pUNuWVKhtSyrUtiUVQaWgQm1bUqG2LagMzf4FyYvK0Q32zyqtVvzZj332WcLVjR8JW40HlxC6lMLYjTS8/sTd0GqWWI/w0DMM1Yat1p4XGeY8dtoNXX+6cZ72Xsl9mHG3WqjcjPtx+6Wpz7GfgTPbG4NTGxiDU0msDe6mZ3Yu5dfgjrLDGLzVtdTNwFtdpt0MnCrcGFwAtwVvdd16M3CSpjE4SdMYnKRpDE7StAX3JE0V+JMh4VFvSB7UGxLx9IaC4fJb9533U6fD3JAgpjckW+kN14hLh/dDZKqfvFtUTNNz92k4/dQxTYew5JfCzOX0o/e56t4PNfc+dFX3/px6VPJS7/NL77vhpx8yb91HGZ+7j/EFpnwcTB9yGluH4wH8OA7GBV/7AELtA5DaB9DXPoBY+wBS7QPItQ9gqHwAZ53gsesB1D4TS+0zsdQ+E8vu5wFx43MfvuznA9j9VUhCNw0gxNkA+i2uQn56UcSUFwaQujG6pyP/4J5PuXV1d9/X3f1QT/d9mHdf6u5+X3f3z7n29/NzrdN1D/tVvZuntb6Qu4WViZYPGnG/3HUXwTMFf7lDL4LnCjoEVQcVuF/u/IvguYIBQaWgIKgU7BFUCkYElYIJwfmeIS4SNIospIcSSyISFFmo84ssFO9FFiryIovAUmKhdi6yUBAXWahyiyxUuUUWqtwSS6bKLbJQ5RZZqHKLLFS5RRaBpcTS7AR9au9aN7R6yV1v81o3tHp9XnHb0KHVi/mahq1e+dc0bDXebrJ9re9aDUIbbe7pO+Z7Y3CKA2NwKgnTTYV8J4Dbgrf6hs1m4K2+FbQZOFW4MXirq2Obgbf6xthW4I6kaQxO0jQGJ2kag5M0jcEFcOWWl94RHvWG5EG9IRFPb0hq024b6h1BTG3oyVZ6wzXi0labkHrvq+59qLr3UnXvz6lHvSz1frMt27yPtQ8g1T6AXPsAhsoHELraBxD2PoDT+y76sPur0Ol9F33Y4ip0yeZtjzuqHc2nL/Wbiz8GkGsfwFD5AMRX/kcs+78Kxen3JSnNByC7H8D02bHyAHZfjcoUkw8DWPqLGTo/9uSwfFQYbu2zhuy+dl0awO5r16UB7L52XRhAv/vadWkArvYB7H/eXhjA/ufthQHsf95eGEAF8/bpAdQ+E/e1z8R97TNxX/tMHGufiWPtM3GzG9Fuc/djs7vW3vDesGmF5fCanoPzgQljcD5dYQve7P6pm4HzMXdjcD7mbgzOx9xt72Bvdp/azcCpw43B+QC9MTiftjcGJ2kag5M0bcGb3cN4M3CS5urgcbrdtMt+Bk7SNAYnaRqDC+C24CRNY3CSpjE4SdMYnKR5yzq8AE7StA0+A0nTGJykaQxO0jQGJ2kagwvgtuAkTWNwkqYxOEnTGJykaQxO0jQFDxxHZA1O0jQGJ2kag5M0jcEJPsbgBB9jcIKPMTjBxxa82bNDwnQ4rQ85zFikURZxUz/k6P75kaXVGX+BpdV5eYGl1dlzgaXVOW6BpdUluNMsze74v8DSat2ywNLqotMCS6tLQwssAkuJhSq3yEKVW2Shyi2yUOUWWahySyyh2Sq3m46qOt6nvryUd/LMzhCaLYkvMfQyrvs5H93MsNn6eUXDZovtFQ0FQ7Vhs2X8RYZp6oYf5nNKs1XcJYa9G/f6PXw5fx02W/KtZyjUh3pD6kO9IfWh3pD68AzDGKbaJsZuZigYqg2pD/WGza4Jr2jY7ALyiobkFL0hOUVt2JNT9IbkFL0hOUVvSE7RGwqGakNyit6QnKI3JKfoDckpekNyitowklPOMczTrXOp8zNDcorekJyiNySn6A0FQ7UhOUVvSE7RG5JT1IbNnrV6kaH4yVDEnW586njy0Ow5lDfjXtj2otlzKDcDZ2IzBmcWXBv89O03zZ5DuRk464C24M2eQ7kZOFW4MTjLkcbgrF0agwvgtuAkTWNwkqYxOEnTGJykqQJ/MiQ8qg2bPS1yTUMint6Q1KY3JIjpDQXDMwz7NBmm2QcTmz1McU1DEpDekFCjNySn6A3JKVpDafaswTUNySl6Q3KK3pCcojcUDNWG5BS9ITlFb0hO0W5IJ80eOrimITlFbejIKXpDauzXhk8slM1FFoGlxEJxW2ShTjC8KU7aPRDydrcMOZn6HGbg7R4euBU4s7IxuABuC04lYQzOmpoxOAtwpjc2S7sHS24FTh1uC85hmNbgfLjBGJykaQxO0jQGF8BtwUmaq4PH6S7ELvsZOEnTGJykaQxO0jQGJ2nagnOsrjU4SdMYnKR5yzq8AE7StA0+HAVsDU7SNAYnaRqDkzSNwUmaxuAkTVtwDka2BidpGoOTNI3BSZrG4AK4LThJ0xicpGkMTtI0Bif42IJz0rI1OMHHGJzgYwz+q7LQTY8KSfJp8MN7d9NtLe7ot+NyKrTuo4zP3cf4gui6UGot0y0z/bHMY+unAcTdDyCmaQApzQeQdj+A6RVUHkDe/QCmC8JhAHmh9dD5sSdD1xeGO+x/uN003BBnA0hd7QNwtQ/A1z6AUPsApPYB7H/eXhjA/ufthQHsf95eGEAF8/bpAdQ+E+faZ+Jc+0yca5+Jc+0zca59Js7nzANHez383yxZ5OlgOZ8lLKxC5Dx22h1S1enGJ3fyyhnudbkXNiUZHOC24B5wW/AAuC24AG4L3gNuCx4BXxv85PtYA1W4MTh1uDH4ALgleN91gNuCkzSNwUmaxuAkTWNwAXxt8FN7ZPQdSdMYnKRpDE7SNAYnaRqDkzRtwR1J0xicpHnLOrwATtK0DT6OpGkMLoDbgpM0jcFJmsbgJE1jcJKmMThJ0xbckzSNwUmaxuAkTWNwkqYxuABuC07SNAYnaRqDE3yMwQk+tuCB4GMMTvAxBpdGwQ+jGvsRcpixtLqIKm7qh3iZsbQ64y+wtDovn2aRVmfPBZZW57gFllaX4BZYWl0oW2ARWEosrS46LbC0ujS0wEKVW2Shyi2yUOWWWHqq3CILVW6RhSq3yNJslXvJDv5uWiR07mhH8tFQMFw29DKu+zkf3cyw2fp5RcNmi+0VDZutzFc0bLaMv8gwTd3ww2xOic1WcZcY9m7c6/fw5ex1GJst+VY0pD7UGwqGakPqQ70h9eEZhjFMtU2M3cyQ+lBvSH2oN2x2TXg9w9TsAvKKhuQUvSE5RW9ITtEbCoZqQ3KK3pCcojckp+gNySl6Q3KK2jCTU/SG5BS9ITlFb0hOOccwTxqp8zNDwVBtSE7RG5JT9IbkFL0hOUVvSE5RGw7kFL2hYLhsKH7SEHGnG586nrxv9hzKm3EvbHvR7DmUm4EzsZmCx2bPobwd+Mnbb2Kz51BuBs46oDE4i4bG4AK4LTjLkcbgrF0ag5M0jcFJmsbgJE1b8GbPodwMnKSpAn8yJDzqDcmDekPBUG1IatMbEsT0hmSrcwz7NBmmbmZIXNIbkoDUhs0eebimITlFb0hO0RuSU/SGgqHakJyiNySn6A3JKXpDcorekJyiNmz2hML1NqSLzR46uKYhOUVvSE7RG1JjvzZ8YqFsLrJQCRdZKG5LLO0e3LjFTXGx3QMhb3fLkJOpz2EOztxpDM6sbAzOfG8MTiVhDM6ami14u8c/bnRjc7sHS24FTh1uDM46oDG4AG4LTtI0BidpGoOTNI3BSZqrg8fpLsQu+xk4SdMWPJI0jcFJmsbgJE1jcJKmMbgAbgtO0rxlHV4AJ2naBh+OArYGJ2kag5M0bcE5kdganKRpDE7SNAYnaRqDC+C24CRNY3CSpjE4SdMYnKRpDE7StAXnTGlrcIKPMTjBxxhcALcFJ/gYgn8/fPefd5/v373/+OHL4TGP//jPw+9f7z89PH/79b9///iXQ+P/AQ==","brillig_names":["owner_of"],"assert_messages":{"308":"attempt to add with overflow","430":"Array index out of bounds","363":"attempt to add with overflow","549":"Array index out of bounds","415":"attempt to add with overflow","28":"Not initialized","284":"Array index out of bounds","531":"attempt to add with overflow","653":"Array index out of bounds","586":"attempt to add with overflow","260":"attempt to add with overflow","446":"Array index out of bounds","507":"Array index out of bounds","638":"attempt to add with overflow","483":"attempt to add with overflow","224":"Storage slot 0 not allowed. Storage slots must start from 1.","157":"token does not exist","346":"Array index out of bounds","669":"Array index out of bounds","276":"Array index out of bounds","462":"attempt to add with overflow","130":"Storage slot 0 not allowed. Storage slots must start from 1.","249":"Array index out of bounds","438":"Array index out of bounds","499":"Array index out of bounds","569":"Array index out of bounds","685":"attempt to add with overflow","691":"Stack too deep","292":"Array index out of bounds","33":"Function owner_of can only be called statically","472":"Array index out of bounds","661":"Array index out of bounds","326":"Array index out of bounds","515":"Array index out of bounds"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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n7qP9x+WF++e+eEnaUN8IpbUOyRTTbf4rGBqWgyygqlp5fgRmMSAYappmckKRtrxXwlGeqx6JZhWXUwSjHSgvA5M6KSnu1eCadb5psA063xTYJp1vikwBph1MG0432evbZjZZ69t+NNnr21YzmevFblI17n377WGZa99RcYw2WtFXi/V69Cqr90ddIeh3Xnu7nmRYWh2OpcC0+x0LgWm2elcCkyz07kUmGancwkw1ux0bv9hWjCeS2+A4bn0BhieS2+AMcCsg2nX+SbAtOt8E2Dadb4JMO06393jkYK163z3wYztOt8EmHadbwJMu843AaZd55sAY4BZB4Pz3QCD8103eNrby1wJpl3nmwDTrvPdB6O92c6VYJj5boBh5rsBhpnvBhgDzDoYnO8GGJzvBhic7wYYnO8GGJzvOhjtnaauBIPB2wCDwdsAY4BZB4PB2wCjvVwP7/fkvH2eFvMsX3tRTZUftZe+ZPnao5lk+drra7J87VUwWb72WpUsX3tFSZavHeyT5WvH72T59151471X3eneq6745mzJ8u+96opvdJYsX3vV/dnpkIl9FsR3GPtZr+69067z/bJX7fU8b6/ai3/eXrWdQt5etW3FD3sN49zrtLg3RfHtlH7W6/42/FF8h6S8vda0vqZ6rWl9TfVa0/qa6rWm9fVxyety77tlrzWtr6lea1pfE72K72OUt1ftgUDeXmvyTalea/JNqV6toV5r8k2pXmvyTaleG/JNfUO+qW/IN7mGfJNryDe5hnyTa8g3Oaup193jAaOryjcleq3KNyV6rco3JXqtyjcleq3KN+33OlTlmxK9VuWbEr3WtObYvEd4b/Yx919evLtvdhTf0/Y8LIn36aP4nrbXgRHf0/ZCMDXdTX8EZv/1rSi+p+2FYGrKt1nBGGDWwbTqYpJgaorZWcHUlMmzgmnW+abANOt8E2DE97S9EAzOdwNMG8732WsbZvbZqzXUaxuW89lrGy7y2WsbxvDZa1Ve773JiIXlg2TxjVmz9iq+12reXqsyWYleq/JNiV6r8k2JXq2hXqvyTYleq/JNiV6r8k2JXhvyTeLbembtVXynzry91uSbEj/4FN9oNG+vDf0YXXw70Ly93tZLPMu/rT14ln/bFf9Z/m0X8a/yxTeyvOolRfENMs985Wz3fPkovvnjhWCafeshBabd930TYNp933cf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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"prepare_transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"is_minter","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["is_minter"],"assert_messages":{"192":"Array index out of bounds","224":"attempt to add with overflow","346":"Array index out of bounds","279":"attempt to add with overflow","378":"attempt to add with overflow","384":"Stack too deep","331":"attempt to add with overflow","200":"Array index out of bounds","165":"Array index out of bounds","130":"Storage slot 0 not allowed. Storage slots must start from 1.","354":"Array index out of bounds","28":"Not initialized","176":"attempt to add with overflow","208":"Array index out of bounds","362":"Array index out of bounds","33":"Function is_minter can only be called statically","242":"Array index out of bounds","262":"Array index out of bounds"}},{"name":"_store_point_in_transient_storage_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"slot","type":{"kind":"field"},"visibility":"private"},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQEBSQCBAAGHxgABgAFgEMdAAGARoBGKwiAQwABKwiARAACKwiARQADKwiARgAEIgANOACARwAAIgA+HgIAAAYeAgAABzA4AAYABwAIJAIBAQYhAgAUAAg5AQAAHgIBAAYeAgAABwo4BgcIIQIAGQAIOQEAABwMAAQGJAIEAAQkAgQBByQCBAMIKgwEBSAAHww4BQgEIQIAIwAEIAAiIxwMAAUEADgBBAkqCAEEJAIEBAoAEAEKASQDBAEEACgEAgoqDAoLKg4CCwAoCwILKg4DCwAoCwILKg4GCyQCBAMLDDgFCwwhAgA0AAw5AQAAACgEAgsAOAsFDCoNDAotDAAKAAkAOAUHBA44BQQJIQIAPAAJOQEAACoMBAUgAB8lAAR4AIAEDQAAAIAEgAMhAABCgAM5AQAAIysAGMoYyg==","debug_symbols":"zZjbaoNAEIbfZa9zsaeZ2cmrlFLMEUFMSEyhhLx7tXWNqRJpTGRuxNVv3c9Z+XH3rFbrxWn7keab3VHN384q2y2TIt3lZet8manFIc2ydPvRvqx0dTD+hz/uk7xqHovkUKi5QdYztc5X5SlpXT5hk2ZrNSd7mXVgBqhZJmhQg9DDOsYIOyZ/pbXrodEHU9PomW7o95kyMNq9fJKNsAY7qT2OrzybRt4Mld5Y4Ei7Nt0rT+RCTRMF05Gnp8rDrXw1QHj1APziAawePYDXzSR47XHoewMfaQR0f6fMmtE+T/3+rf2nT9XHPdDHP9CnN1lYQywwa+L7tULtfXx7DTxQK6ddLKwNDessVjbOPMFGU2Njh2yAOEYFhFZx6plzMLVPaGoJAXzHByf3sXzPhyb3AWx8EDo+QZgPy/LxWpiPEeZjhfk4YT5emA8I80FhPsLy2QvLZy8sn0FYPoOwfAZh+QzC8hmE5TNMn88Grj5D60g2Li5G2FDn7xZQkH3lQ8J8gjAfluRzKZufySFNFtm63pzcnPJla6+y+Nr/3inhbw==","brillig_names":["_store_point_in_transient_storage_unsafe"],"assert_messages":{"24":"Function _store_point_in_transient_storage_unsafe can only be called internally","59":"attempt to add with overflow","51":"Array index out of bounds","65":"Stack too deep","19":"Not initialized"}},{"name":"transfer_to_public","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"5120":"attempt to add with overflow","1402":"Storage slot 0 not allowed. Storage slots must start from 1.","756":"SharedImmutable already initialized","1969":"attempt to add with overflow","4206":"Array index out of bounds","7467":"attempt to add with overflow","5797":"Array index out of bounds","5151":"attempt to add with overflow","6364":"Array index out of bounds","7388":"Array index out of bounds","4694":"attempt to add with overflow","7955":"Array index out of bounds","8979":"attempt to add with overflow","6663":"Array index out of bounds","1653":"Not initialized","8175":"attempt to subtract with overflow","172":"attempt to add with overflow","2409":"attempt to add with overflow","7718":"Array index out of bounds","5859":"attempt to add with overflow","4000":"attempt to add with overflow","5024":"Array index out of bounds","7450":"Array index out of bounds","7907":"attempt to add with overflow","3921":"Array index out of bounds","6993":"Array index out of bounds","7182":"Array index out of bounds","5512":"attempt to add with overflow","5890":"Array index out of bounds","6268":"Array index out of bounds","313":"attempt to add with overflow","4598":"Array index out of bounds","8048":"Array index out of bounds","6567":"Array index out of bounds","5464":"Array index out of bounds","911":"caller is not an admin","3983":"Array index out of bounds","7244":"attempt to add with overflow","2045":"invalid nonce","3447":"attempt to add with overflow","5495":"Array index out of bounds","6897":"Array index out of bounds","7921":"Array index out of bounds","4392":"Array index out of bounds","7653":"attempt to add with overflow","1619":"Function public_get_symbol can only be called statically","4880":"attempt to add with overflow","5258":"attempt to add with overflow","7684":"Array index out of bounds","4801":"Array index out of bounds","7227":"Array index out of bounds","3698":"Storage slot 0 not allowed. Storage slots must start from 1.","8093":"Array index out of bounds","4186":"Array index out of bounds","5210":"attempt to add with overflow","6612":"Array index out of bounds","8660":"Array index out of bounds","8392":"Array index out of bounds","4863":"Array index out of bounds","5052":"attempt to add with overflow","6375":"attempt to add with overflow","5083":"Array index out of bounds","6674":"attempt to add with overflow","719":"Storage slot 0 not allowed. Storage slots must start from 1.","2956":"attempt to add with overflow","7430":"Array index out of bounds","8454":"Array index out of bounds","6059":"attempt to add with overflow","6248":"attempt to add with overflow","2341":"Storage slot 0 not allowed. Storage slots must start from 1.","4578":"attempt to add with overflow","5523":"Array index out of bounds","6090":"Array index out of bounds","6279":"attempt to add with overflow","4609":"attempt to add with overflow","8894":"Array index out of bounds","3963":"Array index out of bounds","4152":"Array index out of bounds","5365":"attempt to add with overflow","6767":"attempt to add with overflow","5097":"Array index out of bounds","5475":"attempt to add with overflow","8925":"attempt to add with overflow","5396":"Array index out of bounds","1489":"Storage slot 0 not allowed. Storage slots must start from 1.","7822":"Array index out of bounds","7097":"Array index out of bounds","5159":"Array index out of bounds","7207":"Array index out of bounds","7396":"Array index out of bounds","7963":"attempt to add with overflow","3032":"attempt to add with overflow","6293":"Array index out of bounds","4623":"Array index out of bounds","8262":"attempt to add with overflow","7994":"attempt to add with overflow","4843":"Array index out of bounds","3929":"Array index out of bounds","5063":"Array index out of bounds","8056":"attempt to add with overflow","6386":"Array index out of bounds","6575":"Array index out of bounds","6685":"Array index out of bounds","1754":"Not initialized","6874":"attempt to add with overflow","4369":"Array index out of bounds","5582":"Array index out of bounds","8843":"Array index out of bounds","5960":"attempt to add with overflow","6149":"attempt to add with overflow","4290":"Array index out of bounds","5503":"attempt to add with overflow","4479":"attempt to add with overflow","6905":"Array index out of bounds","6984":"attempt to add with overflow","4400":"Array index out of bounds","2730":"transfer not prepared","225":"attempt to add with overflow","5534":"attempt to add with overflow","4699":"Array index out of bounds","4809":"Array index out of bounds","8637":"attempt to add with overflow","8826":"attempt to add with overflow","5943":"Array index out of bounds","6132":"Array index out of bounds","6321":"attempt to add with overflow","4462":"Array index out of bounds","7534":"Array index out of bounds","8369":"attempt to add with overflow","8936":"Array index out of bounds","3548":"Storage slot 0 not allowed. Storage slots must start from 1.","8668":"Array index out of bounds","5139":"Array index out of bounds","8400":"Array index out of bounds","5627":"Array index out of bounds","7864":"Array index out of bounds","4335":"Array index out of bounds","5548":"Array index out of bounds","8431":"Array index out of bounds","4067":"Array index out of bounds","5091":"attempt to add with overflow","7139":"Array index out of bounds","8084":"attempt to subtract with overflow","8462":"Array index out of bounds","648":"invalid admin","4744":"Array index out of bounds","8005":"Array index out of bounds","5421":"attempt to add with overflow","6445":"attempt to add with overflow","7579":"Array index out of bounds","5074":"attempt to add with overflow","7311":"Array index out of bounds","6397":"attempt to add with overflow","6696":"attempt to add with overflow","7830":"Array index out of bounds","4947":"Array index out of bounds","8854":"attempt to add with overflow","961":"attempt to add with overflow","7105":"Array index out of bounds","5813":"attempt to add with overflow","5167":"attempt to add with overflow","425":"Array index out of bounds","5923":"Array index out of bounds","6112":"Array index out of bounds","4442":"Array index out of bounds","2583":"attempt to add with overflow","8538":"attempt to add with overflow","8727":"attempt to add with overflow","6332":"Array index out of bounds","8947":"attempt to add with overflow","8868":"Array index out of bounds","7198":"attempt to add with overflow","2267":"Nested call failed!","6552":"attempt to add with overflow","5906":"attempt to add with overflow","8521":"Array index out of bounds","8710":"Array index out of bounds","7875":"attempt to add with overflow","4992":"Array index out of bounds","3133":"Storage slot 0 not allowed. Storage slots must start from 1.","6583":"Array index out of bounds","7607":"attempt to add with overflow","7150":"attempt to add with overflow","1116":"Storage slot 0 not allowed. Storage slots must start from 1.","4377":"attempt to add with overflow","5590":"attempt to add with overflow","4755":"attempt to add with overflow","8016":"attempt to add with overflow","4109":"Array index out of bounds","4298":"Array index out of bounds","8961":"Array index out of bounds","4408":"Array index out of bounds","5432":"Array index out of bounds","1824":"Storage slot 0 not allowed. Storage slots must start from 1.","8157":"Array index out of bounds","7700":"attempt to add with overflow","7889":"Array index out of bounds","7353":"Array index out of bounds","7542":"Array index out of bounds","5226":"Array index out of bounds","862":"attempt to add with overflow","1240":"zero token ID not supported","3477":"Not initialized","5714":"attempt to add with overflow","5635":"Array index out of bounds","8439":"attempt to add with overflow","3886":"Array index out of bounds","4075":"Array index out of bounds","5020":"attempt to add with overflow","8470":"Array index out of bounds","6343":"attempt to add with overflow","5697":"Array index out of bounds","8123":"Array index out of bounds","8501":"Array index out of bounds","8690":"Array index out of bounds","6106":"attempt to add with overflow","7319":"Array index out of bounds","1931":"attempt to add with overflow","4168":"attempt to add with overflow","6027":"Array index out of bounds","4546":"Array index out of bounds","6216":"Array index out of bounds","7618":"Array index out of bounds","7807":"attempt to add with overflow","1206":"attempt to add with overflow","3632":"Function owner_of can only be called statically","7917":"attempt to add with overflow","7082":"attempt to add with overflow","5412":"attempt to add with overflow","7838":"Array index out of bounds","4766":"Array index out of bounds","4955":"Array index out of bounds","6357":"Array index out of bounds","4120":"attempt to add with overflow","4687":"attempt to add with overflow","6735":"Array index out of bounds","7113":"Array index out of bounds","1615":"Not initialized","5443":"attempt to add with overflow","7412":"attempt to add with overflow","4718":"attempt to add with overflow","8168":"attempt to add with overflow","6608":"attempt to add with overflow","1031":"Not initialized","5127":"attempt to add with overflow","7364":"attempt to add with overflow","8199":"attempt to add with overflow","6261":"Array index out of bounds","4591":"Array index out of bounds","3945":"attempt to add with overflow","8230":"Array index out of bounds","8986":"Stack too deep","2007":"attempt to add with overflow","3409":"attempt to add with overflow","3598":"attempt to add with overflow","5457":"Array index out of bounds","3897":"attempt to add with overflow","3062":"Not initialized","4275":"attempt to add with overflow","1581":"Function public_get_name can only be called statically","5677":"Array index out of bounds","5031":"Array index out of bounds","4306":"Array index out of bounds","2447":"attempt to add with overflow","1423":"token already exists","6921":"attempt to add with overflow","5818":"Index out of bounds","6952":"Array index out of bounds","7519":"attempt to add with overflow","4825":"attempt to add with overflow","7629":"attempt to add with overflow","2698":"invalid NFT owner","5313":"attempt to add with overflow","7550":"Array index out of bounds","7928":"Array index out of bounds","5234":"Array index out of bounds","1327":"caller is not a minter","8684":"attempt to add with overflow","4777":"attempt to add with overflow","8416":"attempt to add with overflow","8605":"Array index out of bounds","8794":"Array index out of bounds","4052":"attempt to add with overflow","6289":"attempt to add with overflow","4619":"attempt to add with overflow","3784":"Storage slot 0 not allowed. Storage slots must start from 1.","5643":"Array index out of bounds","8904":"Array index out of bounds","1657":"Function get_admin can only be called statically","4083":"Array index out of bounds","5296":"Array index out of bounds","8179":"attempt to subtract with overflow","4650":"Array index out of bounds","6619":"Array index out of bounds","5516":"Array index out of bounds","8131":"attempt to add with overflow","7296":"attempt to add with overflow","2475":"Not initialized","805":"SharedImmutable already initialized","7973":"Array index out of bounds","7327":"Array index out of bounds","6035":"Array index out of bounds","6224":"Array index out of bounds","6413":"Array index out of bounds","4554":"Array index out of bounds","4932":"attempt to add with overflow","4664":"Array index out of bounds","6712":"Array index out of bounds","2994":"attempt to add with overflow","3183":"transfer not prepared","5042":"attempt to add with overflow","6822":"attempt to add with overflow","4963":"Array index out of bounds","3482":"Function _finish_transfer_to_public can only be called internally","6743":"Array index out of bounds","8066":"Array index out of bounds","4726":"Array index out of bounds","1307":"Storage slot 0 not allowed. Storage slots must start from 1.","5781":"Array index out of bounds","6805":"Array index out of bounds","8207":"Array index out of bounds","7939":"attempt to add with overflow","5056":"Array index out of bounds","8317":"attempt to add with overflow","8238":"Array index out of bounds","4331":"attempt to add with overflow","5544":"attempt to add with overflow","5276":"Array index out of bounds","6300":"Array index out of bounds","4630":"Array index out of bounds","8915":"attempt to add with overflow","6599":"attempt to add with overflow","644":"Initializer address is not the contract deployer","7166":"Array index out of bounds","2613":"Not initialized","5874":"Array index out of bounds","8300":"Array index out of bounds","6630":"attempt to add with overflow","8032":"Array index out of bounds","7575":"attempt to add with overflow","6929":"Array index out of bounds","4424":"attempt to add with overflow","6960":"Array index out of bounds","7984":"attempt to add with overflow","8929":"Array index out of bounds","5132":"Array index out of bounds","5242":"Array index out of bounds","2359":"invalid owner","7668":"Array index out of bounds","421":"attempt to add with overflow","4706":"Array index out of bounds","8613":"Array index out of bounds","8802":"Array index out of bounds","8077":"attempt to add with overflow","6785":"Array index out of bounds","7998":"Array index out of bounds","3067":"Function _finalize_transfer_to_private_unsafe can only be called internally","8833":"Array index out of bounds","4658":"attempt to add with overflow","8108":"attempt to add with overflow","8486":"attempt to add with overflow","8864":"attempt to add with overflow","1050":"caller is not an admin","8139":"Array index out of bounds","892":"Not initialized","4988":"attempt to add with overflow","4342":"Array index out of bounds","4531":"attempt to add with overflow","5177":"Array index out of bounds","5555":"Array index out of bounds","6012":"attempt to add with overflow","6201":"attempt to add with overflow","6311":"attempt to add with overflow","4641":"attempt to add with overflow","1758":"Function is_minter can only be called statically","6043":"Array index out of bounds","6232":"Array index out of bounds","6421":"Array index out of bounds","4562":"Array index out of bounds","6500":"attempt to add with overflow","8280":"Array index out of bounds","6720":"attempt to add with overflow","8957":"attempt to add with overflow","6074":"Array index out of bounds","119":"attempt to add with overflow","2545":"attempt to add with overflow","6641":"Array index out of bounds","7854":"attempt to add with overflow","4136":"Array index out of bounds","7586":"Array index out of bounds","6751":"Array index out of bounds","7129":"attempt to add with overflow","6483":"Array index out of bounds","5837":"Array index out of bounds","7885":"attempt to add with overflow","5380":"Array index out of bounds","638":"Initialization hash does not match","4734":"attempt to add with overflow","8184":"Array index out of bounds","6325":"Array index out of bounds","5600":"Array index out of bounds","5789":"Array index out of bounds","8215":"attempt to add with overflow","1236":"Not initialized","7380":"Array index out of bounds","1724":"attempt to add with overflow","8246":"Array index out of bounds","432":"Array index out of bounds","2480":"Function _store_point_in_transient_storage_unsafe can only be called internally","999":"attempt to add with overflow","8088":"attempt to subtract with overflow","3913":"Array index out of bounds","7174":"Array index out of bounds","5882":"Array index out of bounds","5425":"Array index out of bounds","8875":"Array index out of bounds","8040":"attempt to add with overflow","2274":"Message not authorized by account","4322":"attempt to add with overflow","6937":"attempt to add with overflow","4999":"Array index out of bounds","5188":"attempt to add with overflow","4353":"attempt to add with overflow","5566":"attempt to add with overflow","6968":"Array index out of bounds","2037":"Not initialized","3628":"Not initialized","6889":"Array index out of bounds","7645":"Array index out of bounds","6353":"attempt to add with overflow","7566":"attempt to add with overflow","7755":"attempt to add with overflow","8590":"attempt to add with overflow","8779":"attempt to add with overflow","8968":"Array index out of bounds","6463":"Array index out of bounds","6652":"attempt to add with overflow","4793":"Array index out of bounds","7030":"attempt to add with overflow","7676":"Array index out of bounds","7597":"attempt to add with overflow","8621":"Array index out of bounds","8810":"Array index out of bounds","5659":"attempt to add with overflow","7896":"Array index out of bounds","8652":"Array index out of bounds","4099":"attempt to add with overflow","8384":"Array index out of bounds","7738":"Array index out of bounds","6257":"attempt to add with overflow","4587":"attempt to add with overflow","5611":"attempt to add with overflow","1893":"attempt to add with overflow","7013":"Array index out of bounds","8147":"attempt to add with overflow","1168":"attempt to add with overflow","5453":"attempt to add with overflow","443":"attempt to add with overflow","2680":"Storage slot 0 not allowed. Storage slots must start from 1.","7611":"Array index out of bounds","7343":"attempt to add with overflow","1577":"Not initialized","6429":"Array index out of bounds","6082":"Array index out of bounds","4223":"attempt to add with overflow","8886":"attempt to add with overflow","4979":"attempt to add with overflow","4144":"Array index out of bounds","1560":"Storage slot 0 not allowed. Storage slots must start from 1.","5010":"attempt to add with overflow","5199":"Array index out of bounds","5388":"Array index out of bounds","3151":"invalid NFT owner","3718":"token does not exist","5766":"attempt to add with overflow"}},{"name":"transfer_in_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["transfer_in_public"],"assert_messages":{"1088":"attempt to add with overflow","637":"Array index out of bounds","378":"Storage slot 0 not allowed. Storage slots must start from 1.","972":"Array index out of bounds","451":"attempt to add with overflow","430":"attempt to add with overflow","43":"invalid nonce","875":"Array index out of bounds","677":"Array index out of bounds","930":"Array index out of bounds","1064":"Array index out of bounds","537":"Array index out of bounds","278":"Nested call failed!","467":"Array index out of bounds","403":"invalid owner","653":"attempt to add with overflow","714":"Array index out of bounds","699":"attempt to add with overflow","440":"Array index out of bounds","629":"Array index out of bounds","763":"Array index out of bounds","946":"attempt to add with overflow","952":"Array index out of bounds","422":"Array index out of bounds","483":"Array index out of bounds","800":"attempt to add with overflow","285":"Message not authorized by account","730":"Array index out of bounds","867":"Array index out of bounds","852":"attempt to add with overflow","922":"Array index out of bounds","989":"attempt to add with overflow","1041":"attempt to add with overflow","1056":"Array index out of bounds","517":"Array index out of bounds","499":"attempt to add with overflow","883":"Array index out of bounds","621":"Array index out of bounds","554":"attempt to add with overflow","746":"attempt to add with overflow","1072":"Array index out of bounds","30":"Not initialized","475":"Array index out of bounds","606":"attempt to add with overflow","658":"Index out of bounds","722":"Array index out of bounds","783":"Array index out of bounds","914":"Array index out of bounds","1094":"Stack too deep","899":"attempt to add with overflow"}},{"name":"private_get_name","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEceAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIDABABAwEkAwQBAgAoAgIDKgwDBCQCAAAFKg4FBCoNAgMAKAMCAyoOAwIqCAEDAAABAgEqDgIDJAIEAQIkAgQABCQCAAMFKgwEASAAKAo4AQQGIQIAMQAGIAArKg0DAQAoAQIDADgDBAUqDQUCKgwCASMqDQMGHAwAAQcAOAUHCCwMAAgAByQCBAEJDDgBCQohAgA5AAo5AQAAKwQABoADJQAEAAKABCIATCsIgAUACAAoCAIJADgJAQoqDgcKADgBAgYOOAEGByECAEQABzkBAAAqDggDKgwGASAAKCUABHgAgAQNAAAAgASAAyEAAEuAAzkBAAAjKwGAA4AGCwCABgACgAchAABQgAcgAFIrAIADgAUgAGArAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAF6ACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAAVSUBBAABgAUgAGAjKwAYyhjK","debug_symbols":"1ZrfTsIwFMbfpddctD3/Wl7FGDMUzJJlGEATQ3h3h9KBblmjqOm5ISt8bX/09OzrWbY3D8vF8+Nd3a7WWzO/2ZtmfV/t6nXbtfaHmVls6qapH+8uvzb2+OHsu377VLXH5nZXbXZm7jjamVm2D92lWNuNsKqbpZmLP8wG4kh00kahXuqYRrQQOYkhCp7VFkbUjMGd1IxRPqlvZ8a5q9m7kXwSW/L/Su+vX/noeniXW3rnKSY1XKpH4UUgnNQiwQ3g4Vfh6TP8cQL86wnoryfgqycgjylk5DkbMrRJLQh+EDL5Js+xT/hBn/j9Pt7+oM9o9qOnlNDoJZv9AdMEzsbzigUZiwZjGpqYIRMNgiBJDSF8jYb3qulBNT2qpifV9KyaXlTTB9X0UTM9WNX0qr0WVHstqPZaUO21WHjWoktjd5c0oC985yDYnh54QP//O8f3e4ElZOgdSF/9QTiDgON3elJNz6rpCz8pTGctlX7P4T5SKIOnWlT4SQF7kFH6wk8KCPFMn8uSaH0iiZaG/1W1O1Dh54oMfeE1fIa+8Bo+Q194DZ+hL7yGz9CX7syT9Fy6M0/Tl+7M0/TFO/MkvWqvZdVey6q9llV7Lav2WlbstYeu+VJt6mrRLE8vgaye2/uLd0J2r08fv3TiNw==","brillig_names":["get_admin"],"assert_messages":{"56":"Array index out of bounds","74":"Stack too deep","15":"Not initialized","20":"Function get_admin can only be called statically","67":"attempt to add with overflow"}},{"name":"set_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAGwqCAEDAAABAgEkAgEABCoOBAMqCAEDAAABAgEkAgAABCoOBAMqCAEDAAABAgEkAgACBSoOBQMeAgAAAx4CAAAFMDgAAwAFAAYkAgEBAyECABwABjkBAAAqCAEDJAIEAgUAEAEFASQDBAEDACgDAgUqDAUGKg4EBioNAwUAKAUCBSoOBQMqCAEFAAABAgEqDgMFJAIEAAMkAgQBBCQCAAMGKgwDAiAALgo4AgMHIQIAVgAHIAAxKg0FBwAoBwIIADgIAwkqDQkFHgIBAAcKOAUHCCECADkACDkBAAAqDAMCIAA7CjgCAwUhAgA/AAUgAD4jHAwAAgUAOAYFByoIAQUkAgQCCAAQAQgBJAMEAQUAKAUCCCoMCAkqDgEJJAIEAQkMOAIJCiECAEwACjkBAAAAKAUCCQA4CQIKKg0KCC0MAAgABwA4AgQFDjgCBQchAgBUAAc5AQAAKgwFAiAAOyoNBQccDAACCAA4BggJLAwACQAIJAIEAQoMOAIKCyECAF4ACzkBAAArBAAHgAMlAAQAAoAEIgBxKwiABQAJACgJAgoAOAoCCyoOCAsAOAIEBw44AgcIIQIAaQAIOQEAACoOCQUqDAcCIAAuJQAEeACABA0AAACABIADIQAAcIADOQEAACMrAYADgAYLAIAGAAKAByEAAHWAByAAdysAgAOABSAAhSsAAAGABQEAAAGABAABJQAEAACACQ0AgAmABIAKFwCACoAKIQAAg4AKAQCAA4AJgAsrAYALgAgBAIAFgAmACysCgAiACwEAgAkAAoAJIAB6JQEEAAGABSAAhSMrABjKGMo=","debug_symbols":"1ZvdbuIwEIXfJddczNieGQ+vslpV0EKFhKACutIK8e4b2jikmzRW0x95biCBM/EXe+ITO865elgtnx/vNrv1/ljNf52r7f5+cdrsd/Xe+TKrlofNdrt5vOv+XMH1A+FFf3xa7K67x9PicKrmyAqzarV7qDcFoD7CerNdVXNxl9+zCnFCjJsQ4yfEhAkxNCGGJ8TIhJg4IUY/HuMm5IGbkAfuo3kw64mVqNGqUCtFpgGtV05irxJuavADag4RGzUHlTfqK7v/NHt9JJfEQO5H6cPna16xhcdc1aMjTWrfVQ/Ci/jYqEUi9uDpS+HpLfy1AP7uAuS7CxjsKZxiqlennnPZGUMqAUFvJUQZUBOHlMvE7DMNTD5KUvsYew2sluk9mKZH0/TONL03TR9M05NpejZNL6bpTXutN+21wbTXhsKv2oDp2PUm9egLz5zgoaXvgDT09POZ49pcYIkZevTS3t/7eBsLeOQXejRN70zTv3OX1ianU84M3gK0A9wAgXNjeQpJzfRf3l95QrY2O0GvMy9EE2J4QsxgH+EB0qXpATXT0o5TAVhXcqalGSC1NIPTXB8hmqYlKHZG3E3Nsi+bPoa2f44UevShcHqnY/RUOD1xS889b2Q2TS+m6aNp+sJ7zHF6AdP0aJremaYv3WvH6Uv32nF6014rpr1WTHutmPZaKd1rkW70uVGioveNWlF699OxdGd+/1yv9KU78zh96c48Tl+6M4/Tm55jjYU/GQnczqsF6a0yiYU/GQnkxuiLn9/WG31uTlPBJRIF6p2rFv4cZXwuXwtfs5ChL3zNQoa+8DULGfpgmr7wNQsZ+tKdeZy+dGcepy/dmcfpTT95RjBttgim3RbBtN3WX7bxTRsugmHHvdS7fxaHzWK5XTWvAq2fd/edN4NOf59e/6nF/wA=","brillig_names":["set_admin"],"assert_messages":{"56":"caller is not an admin","83":"attempt to add with overflow","93":"Array index out of bounds","104":"attempt to add with overflow","111":"Stack too deep","75":"Array index out of bounds","27":"Not initialized"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d6523016"},{"kind":"string","value":"NFTNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"token_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"NFT"}},{"name":"fields","value":{"fields":[{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"private_nfts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"nft_exists","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"public_owners","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::NFTTransfer"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_to_public_parameters"}}],"kind":"struct","path":"NFT::transfer_to_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::owner_of_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::owner_of_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"slot","type":{"kind":"field"}},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_parameters"}}],"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"NFT::cancel_authwit_parameters"}}],"kind":"struct","path":"NFT::cancel_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::public_get_name_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::public_get_name_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::set_admin_parameters"}}],"kind":"struct","path":"NFT::set_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_to_private_parameters"}}],"kind":"struct","path":"NFT::transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::_finish_transfer_to_public_parameters"}}],"kind":"struct","path":"NFT::_finish_transfer_to_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::private_get_name_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::private_get_name_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::get_admin_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"NFT::get_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::public_get_symbol_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::public_get_symbol_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}}],"kind":"struct","path":"NFT::constructor_parameters"}}],"kind":"struct","path":"NFT::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::private_get_symbol_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::private_get_symbol_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::mint_parameters"}}],"kind":"struct","path":"NFT::mint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}],"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_parameters"}}],"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::prepare_transfer_to_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"NFT::prepare_transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::is_minter_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"NFT::is_minter_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"approve","type":{"kind":"boolean"}}],"kind":"struct","path":"NFT::set_minter_parameters"}}],"kind":"struct","path":"NFT::set_minter_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}],"kind":"struct","path":"NFT::finalize_transfer_to_private_parameters"}}],"kind":"struct","path":"NFT::finalize_transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_in_public_parameters"}}],"kind":"struct","path":"NFT::transfer_in_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_in_private_parameters"}}],"kind":"struct","path":"NFT::transfer_in_private_abi"}]}},"file_map":{"101":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"102":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::storage_read,\n};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"103":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"104":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"108":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"109":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"111":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"124":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"125":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"126":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"127":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"128":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"129":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"130":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"131":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"132":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"134":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"},"137":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice,\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: arr_copy_slice(\n            fields,\n            [0; PUBLIC_DATA_TREE_HEIGHT],\n            1 + LEAF_PREIMAGE_LENGTH,\n        ),\n    }\n}\n"},"138":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"142":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"145":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"},"146":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"160":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: Header,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n                == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path)\n                ,\n                \"Proving public value inclusion failed\",\n            );\n\n            // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n            // we have two scenarios:\n            // 1. The tree entry is initialized, and the value is the same as the one in the witness\n            // 2. The entry was never initialized, and the value is default zero (the default)\n            // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n            let preimage = witness.leaf_preimage;\n\n            let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n            let is_next_greater_than =\n                full_field_less_than(public_data_tree_index, preimage.next_slot);\n            let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n            let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n            let value = if is_in_range {\n                0\n            } else {\n                assert_eq(\n                    preimage.slot,\n                    public_data_tree_index,\n                    \"Public data tree index doesn't match witness\",\n                );\n                preimage.value\n            };\n\n            value\n        }\n}\n"},"165":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"166":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"169":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"171":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"178":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize},\n};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"179":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"187":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"190":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"230":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"239":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"272":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"286":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"306":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"308":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"309":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"311":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"312":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"315":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"316":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"323":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"325":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"329":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot: Field,\n    value: Field,\n    next_slot: Field,\n    next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl Serialize<1> for FieldCompressedString {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n    fn deserialize(input: [Field; 1]) -> Self {\n        Self { value: input[0] }\n    }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"},"348":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"66":{"path":"std/string.nr","source":"use crate::collections::vec::Vec;\nuse crate::convert::From;\n\nimpl<let N: u32> str<N> {\n    /// Converts the given string into a byte array\n    #[builtin(str_as_bytes)]\n    pub fn as_bytes(self) -> [u8; N] {}\n\n    /// return a byte vector of the str content\n    pub fn as_bytes_vec(self: Self) -> Vec<u8> {\n        Vec::from_slice(self.as_bytes().as_slice())\n    }\n}\n\nimpl<let N: u32> From<[u8; N]> for str<N> {\n    fn from(bytes: [u8; N]) -> Self {\n        bytes.as_str_unchecked()\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/Users/satyam/projects/aztec-projects/ab2/umbra-helix/contracts/nft_contracts/src/types/nft_note.nr","source":"use dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, oracle::random::random,\n    prelude::{NullifiableNote, NoteHeader, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator, traits::{Empty, Eq}},\n    macros::notes::partial_note\n};\n\n#[partial_note(quote { token_id})]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for NFTNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        NFTNote { token_id, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"72":{"path":"/Users/satyam/projects/aztec-projects/ab2/umbra-helix/contracts/nft_contracts/src/main.nr","source":"mod types;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal NFT implementation with `AuthWit` support that allows minting in public-only and transfers in both public\n// and private.\n#[aztec]\ncontract NFT {\n    use dep::compressed_string::FieldCompressedString;\n    use dep::aztec::{\n        oracle::random::random,\n        prelude::{\n            NoteGetterOptions, NoteViewerOptions, Map, PublicMutable, SharedImmutable, PrivateSet,\n            AztecAddress, PrivateContext, PublicContext,\n        },\n        encrypted_logs::encrypted_note_emission::{\n            encode_and_encrypt_note, encrypt_and_emit_partial_log,\n        }, hash::pedersen_hash, keys::getters::get_public_keys, note::constants::MAX_NOTES_PER_PAGE,\n        protocol_types::traits::is_empty, utils::comparison::Comparator,\n        protocol_types::{point::Point, traits::Serialize},\n        macros::{\n            storage::storage, events::event,\n            functions::{private, public, view, internal, initializer},\n        },\n    };\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use std::{embedded_curve_ops::EmbeddedCurvePoint, meta::derive};\n    use crate::types::nft_note::NFTNote;\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[event]\n    #[derive(Serialize)]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        // The symbol of the NFT\n        symbol: SharedImmutable<FieldCompressedString, Context>,\n        // The name of the NFT\n        name: SharedImmutable<FieldCompressedString, Context>,\n        // The admin of the contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Addresses that can mint\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // Contains the NFTs owned by each address in private.\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        // A map from token ID to a boolean indicating if the NFT exists.\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        // A map from token ID to the public owner of the NFT.\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not a minter\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the transfer.\n        let hiding_point_slot = _prepare_transfer_to_private(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usafe of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares a transfer to a private balance of `to`. The transfer then needs to be\n    /// finalized by calling `finalize_transfer_to_private`. Returns a hiding point slot.\n    #[private]\n    fn prepare_transfer_to_private(to: AztecAddress) -> Field {\n        _prepare_transfer_to_private(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_transfer_to_private` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_transfer_to_private(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_keys = get_public_keys(to);\n        let to_npk_m_hash = to_keys.npk_m.hash();\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload =\n            NFTNote::setup_payload().new(to_npk_m_hash, note_randomness, to_note_slot);\n\n        // We encrypt and emit the partial note log\n        encrypt_and_emit_partial_log(context, note_setup_payload.log_plaintext, to_keys, to);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_point_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    #[public]\n    #[internal]\n    fn _store_point_in_transient_storage_unsafe(slot: Field, point: Point) {\n        context.storage_write(slot, point);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_transfer_to_private` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Read the hiding point from \"transient\" storage and check it's not empty to ensure the transfer was prepared\n        let hiding_point: Point = context.storage_read(hiding_point_slot);\n        assert(!is_empty(hiding_point), \"transfer not prepared\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload = NFTNote::finalization_payload().new(hiding_point, token_id);\n\n        // We insert the finalization note hash\n        context.push_note_hash(finalization_payload.note_hash);\n\n        // We emit the `token_id` as unencrypted event such that the `NoteProcessor` can use it to reconstruct the note\n        context.emit_unencrypted_log(finalization_payload.log);\n\n        // At last we reset public storage to zero to achieve the effect of transient storage - kernels will squash\n        // the writes\n        context.storage_write(hiding_point_slot, Point::empty());\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let from_ovpk_m = get_public_keys(from).ovpk_m;\n        let to_keys = get_public_keys(to);\n\n        let mut new_note = NFTNote::new(token_id, to_keys.npk_m.hash());\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(\n            &mut context,\n            from_ovpk_m,\n            to_keys.ivpk_m,\n            to,\n        ));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n}\n"},"75":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, CANONICAL_AUTH_REGISTRY_ADDRESS,\n    }, hash::poseidon2_hash_with_separator,\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let result: Field = context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n            [on_behalf_of.to_field(), inner_hash].as_slice(),\n            GasOpts::default(),\n        )\n        .deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n            [message_hash, authorize as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n            [context.this_address().to_field(), reject as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n"},"87":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"88":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"90":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"93":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"94":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"97":{"path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"}}}